@model PagedList.IPagedList<helpdesk.Models.Order>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Zgłoszenia";
}


<p>
    @Html.ActionLink("Utwórz nowe", "Create", null, htmlAttributes: new { @class = "btn btn-outline-success" })

    <button class="btn btn-outline-primary" type="button" data-toggle="collapse" data-target="#collapseBody" aria-expanded="false" aria-controls="collapseBody">
        Wyszukaj
    </button>
    <div class="collapse" id="collapseBody">
        <div class="card card-body border-primary mb-3 bg-light">
            @using (Html.BeginForm("Index", "Orders", FormMethod.Get))
            {
            <div class="form-inline">
                <div class="form-group">
                    @Html.Label("Kategoria", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.DropDownList("CategoryId", null, "Wszystkie", htmlAttributes: new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.Label("Status", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-2">
                        @Html.DropDownList("StatusId", null, "Wszystkie", htmlAttributes: new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="form-group">
                        @Html.Editor("Query", new { htmlAttributes = new { @class = "form-control", @placeholder = "Szukaj w treści" } })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Wyszukaj" class="btn btn-outline-primary" />
                    </div>
                </div>
            </div>
            }
        </div>
    </div>

    <table class="table table-responsive table-hover">
        <thead class="thead-light">
            <tr>
                <th>
                    #
                </th>
                <th>
                    Kategoria
                </th>
                <th>
                    Użytkownik
                </th>
                <th>
                    Status
                </th>
                <th>
                    Data utworzenia
                </th>
                <th>
                    Data zamknięcia
                </th>
                <th>
                    Pilne
                </th>
                <th>
                    Treść
                </th>
            </tr>
        </thead>

        @foreach (var item in Model)
        {
            string rowTheme;
            if (!item.Urgent)
            {
                rowTheme = "table-light";
            }
            else
            {
                rowTheme = "table-danger";
            }

            if (item.Status.StatusName == "realizowane")
            {
                rowTheme = "table-primary";
            }
            if (item.Status.StatusName == "zamknięte")
            {
                rowTheme = "table-success";
            }
            else if (item.Status.StatusName == "anulowane")
            {
                rowTheme = "table-dark";
            }

            <tr class="@rowTheme" onclick="location.href = '@Url.Action("Details", "Orders",new { id = item.OrderId })'">
                <td>
                    @Html.DisplayFor(modelItem => item.OrderId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Category.CategoryName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UserName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Status.StatusName)
                <td>
                    @Html.DisplayFor(modelItem => item.TimeCreated)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TimeClosed)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Urgent)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ContentShort)
                </td>
            </tr>
        }

    </table>

    Strona @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) z @Model.PageCount

    @Html.PagedListPager(Model, page => Url.Action("Index",
                                                        new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
